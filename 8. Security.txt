Security
--------------------------------------
Authentication: (who are you)
--------------------------------------
username and pasword (dont use in kebernetes)
username and token (dont use in kebernetes)

certificates (public key {.crt .pem}(Lock)  and private key {.key,-key.pem})
intruder can provide fake certificate
so Browsers certificate authority (CA)

kubectl --> API-server --> Scheduler
			API-server --> Controller
			API-server --> ETCD

cd /etc/kubernetes/
pki
admin.conf
controller-manager.conf
scheduler.conf
manifests

cd manifests
all the yaml file for keburnetese componenet

under pki folder all the key stored

ca.crt and ca.key inbuild ca for kebernetes
-------------------
Create own user:
-------------------

Generate key  --> raised CSR (certificate signing request) --> CA sign the request ---> Authorization

mkdir -p /home/prod-user/certs
cd /home/prod-user/certs

openssl genrsa -out prod-user.key 2048 # private key will be created 
#prod-user.key

openssl req -new -key prod-user.key -out prod-user.csr -subj "/CN=prod-user/O=devops"
ls -l
cat prod-user.csr | base64 | tr -d '\n'

# we raised request now kubernetes has to sign request by CA

--------------------------------------
CertificateSigningRequest.yml
--------------------------------------

kind: CertificateSigningRequest
apiVersion: certificates.k8s.io/v1
metadata:
   name: user1
spec:
  groups:
    - system:authenticated
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ25UQ0NBWVVDQVFBd1dERUxNQWtHQTFVRUJoTUNTVTR4Q3pBSkJnTlZCQWdNQWxST01Rd3dDZ1lEVlFRSApEQU5JV1VReEN6QUpCZ05WQkFvTUFsSkpNUXN3Q1FZRFZRUUxEQUpVVWpFVU1CSUdBMVVFQXd3TGQzZDNMbUZpCll5NWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzNRL3FDVnJDWjYxQUwKNnhXN2FHVFg4ajRmUVlZSnB4ekd5RFRVeWR3R1hUa21PZVY1REw3Y29IZWN3bHRtZU4vU0FxbEFaU3VQWDhvVgo4SEF4WVdnWEFKQzNwTWJvUVR5TURubUJnZ2x3WjFvamlNdW81RURVbTZyRmpMZEpyM3VKYWJYN212QjA4UC8xCm5EdGtBTHV4NW5xK3ZHY2NhbjJndVJvRUI3cXJYa2ZJZExid2t3QUZLNmNWaHc3Z2dkbzhOWFZRem9PeGdSME8KeXNkK2JLSTBXY3hIL0hrK3ZwZHpBakIyOGYzYloySk4xRURvZWtMREVNcXFEM1dkTGkyY296clhWM1hrR0tLdworbGtndHQ4czhxeGNsQVNxNDlWR0hHdjYyQVord3VBOGxWcWx6cW81S2l1YzhKWnphclF1VURsblMwQUVXTjhaCjZPNTEwZmxQQWdNQkFBR2dBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBTzdVZ3VFUHI5eExVL2UxV2hpTngKUDhFOWdvanVNb01YWTFaMWFYeW8wdXo3U0ZEWHNDYnBudGRIakZpMzc3VFhRd3dhYXFRYUY1dUtudlljaDBGagp1M2kyWWxaUmYvc2RXK1FZMVJJTVNHVFNUaERRcENVS2t2TnRNc3VYWjMvVVhLM2lYajZ1RGhWakFCSlZlaDRtClcvU3hORGxLenhQdUJ3YjhtZHJpc1ZBWXEvd3B0N1E5cDZpMnhjZ3ErSlFaVHBFRkd1bi9sVldMWjlVeDAzOWQKT3N0ZVk0UVdKYThVVndOUjdMOE9GT0IvV24rclFkOFBDZHpYZXg0NUc5V1dvS0V0UzFJOXBGdmYxUlVVdnM1VAp1WEJjVFkxVjM4OUprcHQ5SUtiVUMyZTlYampnMENydmFheFNyc3FZdVYzNlVPditvYjROUmsraVRwRUIzbDJGCldnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
	#above signing request generated by prod-user paste it here carefully
  signerName: kubernetes.io/kube-apiserver-client
  #expirationSeconds: 86400
  usages:
  - client auth
  
  
kubectl create -f CertificateSigningRequest.yml
kubectl get csr
----------------------------------------------------------------------------

kubectl get csr
kubectl certificate approve prod-user
# optional kubectl get csr prod-user -o jsonpath="{.status.certificate}" | base64 --decode > prod-user.crt      ## this generates a crt file

# till here we have created user but we havent give authorizatio to user

--------------------------------------   

----------------------------------------------------------------------------------------------------------------------------------------
Authorization: (what you can do)
Roles / Cluster Roles
Roles Binding / Cluster Role Binding 
Role based authentication (RBAC)

namespaced level component ( Roles )
kubectl api-resources --namespaced-true

developer - pods, deployment, rc, rs
developer is role and assign it to the some user called ravi this is called role binding 
-------------------
cluster level resources ( Cluster Roles )
kubectl api-resources --namespaced-false

Admin - namespaces, pv, nodes
Admin is role and assign it to the some user called admin this is called cluster role binding 

 
kubectl create role prodadmin --verb=get,list,watch,create --resource=pods,services --namespace default
kubectl get roles
kubectl describe role prodadmin
   
kubectl create rolebinding prodadminbinding --user=prod-user --role=prodadmin --namespace default
kubectl get pods --as prod-user
kubectl get deploy  --as prod-user
kubectl -n kube-system get pods --as prod-user
kubectl delete role prodadmin
kubectl delete rolebinding prodadminbinding
kubectl get clusterroles
kubectl describe clusterrole admin
kubectl create clusterrolebinding abcd --user=prod-user --clusterrole view
kubectl get all --all-namespaces --as prod-user
kubectl run pod1 --image nginx -n kube-system --as prod-user
kubectl run pod1 --image nginx --as prod-user

----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
which user is connection to which cluster

kubectl config get-contexts
cd
vi .kube/config
==== create a dummy context=====
kubectl config get-contexts

* current context mark with star
vi .kube/config
kubectl config use-context testcluster
kubectl config get-contexts
kubectl get pods
kubectl config use-context kubernetes-admin@kubernetes
  



#### To SEE Users : kubectl config view -o jsonpath='{.users[].name}' ;echo ""



connecting master from jump server we can copy .kube cinfig file and paste it in jump server 
also install kubectl on jump server 


add context to the config file for diff user for diff cluster 

--------------------------------------
service accounts
--------------------------------------
